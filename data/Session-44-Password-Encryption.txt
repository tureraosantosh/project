Session-44-Password-Encryption.
------------------------------------------
------------------------------------------------------------------------
Today's session : Session-57-En-coding-De-Coding-En-cryptionDe-Cryption
------------------------------------------------------------------------
-> In our application we are storing password given by user as it is

-> If we store password like that then it will be visible for the people who have access for our Database.

-> In Security standpoint, we should not store passwords directley like that.
-------------------------------------------------------------------------
-> If we are dealing with Passwords in our application then we have to encrypt and decrypt the passwords.
-------------------------------------------------------------------------
Encoding & Decoding
-------------------------------------------------------------------------
-> Encoding and Decoding techniques will be used to transmit the data from one place to another place or from one application to another application.

-> To work with Encoding and Decoding we have java.util.Base64 class

-
-------------------------------------------------------------------------
package in.ashokit.beans;

import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;

public class EncodeDecodeUtils {

	public static String encode(String text) {
		Encoder encoder = Base64.getEncoder();
		String encodedString = encoder.encodeToString(text.getBytes());
		return encodedString;
	}

	public static String decode(String encodedStr) {
		Decoder decoder = Base64.getDecoder();
		byte[] decode = decoder.decode(encodedStr);
		return new String(decode); // converting byte[] to string
	}

	public static void main(String[] args) {
		String encodedStr = encode("ashokit@123");
		System.out.println("Encoded String :: " + encodedStr);
		String decodedStr = decode(encodedStr);
		System.out.println("Decoded String :: " + decodedStr);
	}

}
-------------------------------------------------------------------------
Encryption & De-Cryption
------------------------------------------------------------------------
-> Encryption is the process of converting data from readable format to un-readable format.

-> To covert encrypted data into orginal format we will use Decryption.
------------------------------------------------------------------------
package in.ashokit.beans;

import java.security.MessageDigest;
import java.util.Base64;
import java.util.Base64.Encoder;

public class Test {
	public static void main(String[] args) throws Exception {

		String pwd = "abc@123";

		MessageDigest msgDigest = MessageDigest.getInstance("SHA-1");

		msgDigest.reset(); //clearing data

		msgDigest.update(pwd.getBytes()); //setting the data to encrypt

		byte[] digest = msgDigest.digest();

		String digestedPwd = new String(digest);
		System.out.println("Digested Pwd :: " + digestedPwd);

		Encoder encoder = Base64.getEncoder();
		String encodeToString = encoder.encodeToString(digest);
		System.out.println("Digested + Encoded Val :: " + encodeToString);

	}
}
------------------------------------------------------------------------
Note: MessageDigest will support only for Encryption it is not supporting for Decryption.
-----------------------------------------------------------------------
package in.ashokit.beans;

import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class EncryptionDecryptionAES {
	static Cipher cipher;

	public static void main(String[] args) throws Exception {
		/*
		 * create key If we need to generate a new key use a KeyGenerator If we have
		 * existing plaintext key use a SecretKeyFactory
		 */
		KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
		keyGenerator.init(128); // block size is 128bits
		SecretKey secretKey = keyGenerator.generateKey();

		/*
		 * Cipher Info Algorithm : for the encryption of electronic data mode of
		 * operation : to avoid repeated blocks encrypt to the same values. padding:
		 * ensuring messages are the proper length necessary for certain ciphers
		 * mode/padding are not used with stream cyphers.
		 */
		cipher = Cipher.getInstance("AES"); // SunJCE provider AES algorithm, mode(optional) and padding
											// schema(optional)

		String plainText = "ashokit@123";
		System.out.println("Plain Text Before Encryption: " + plainText);

		String encryptedText = encrypt(plainText, secretKey);
		System.out.println("Encrypted Text After Encryption: " + encryptedText);

		String decryptedText = decrypt(encryptedText, secretKey);
		System.out.println("Decrypted Text After Decryption: " + decryptedText);
	}

	public static String encrypt(String plainText, SecretKey secretKey) throws Exception {
		byte[] plainTextByte = plainText.getBytes();
		cipher.init(Cipher.ENCRYPT_MODE, secretKey);
		byte[] encryptedByte = cipher.doFinal(plainTextByte);
		Base64.Encoder encoder = Base64.getEncoder();
		String encryptedText = encoder.encodeToString(encryptedByte);
		return encryptedText;
	}

	public static String decrypt(String encryptedText, SecretKey secretKey) throws Exception {
		Base64.Decoder decoder = Base64.getDecoder();
		byte[] encryptedTextByte = decoder.decode(encryptedText);
		cipher.init(Cipher.DECRYPT_MODE, secretKey);
		byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
		String decryptedText = new String(decryptedByte);
		return decryptedText;
	}
}
